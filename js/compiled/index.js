// Generated by CoffeeScript 1.6.2
(function() {
  var Application,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Application = (function() {
    var lastUpdatedTime, map, markerPositions, markers, routeViewTimer, routes, selectedRoute, stopMarkers;

    routes = {};

    markers = {};

    stopMarkers = {};

    markerPositions = {};

    lastUpdatedTime = 0;

    selectedRoute = null;

    map = null;

    routeViewTimer = null;

    Application.prototype.abbrForVehicle = function(vehicle) {
      var dirTag, preciseRoute, routeTag;

      dirTag = $(vehicle).attr('dirTag');
      routeTag = $(vehicle).attr('routeTag');
      if (dirTag !== void 0) {
        preciseRoute = dirTag.split('_')[2];
      }
      if (dirTag === void 0 || preciseRoute.substr(0, routeTag.length) !== routeTag || preciseRoute !== preciseRoute.toUpperCase()) {
        preciseRoute = routeTag;
      }
      return preciseRoute;
    };

    Application.prototype.nameForRoute = function(vehicle) {
      var routeName, routeTag;

      routeTag = $(vehicle).attr('routeTag');
      routeName = routes[routeTag]['name'].split('-')[1];
      return this.abbrForVehicle(vehicle) + " - " + routeName;
    };

    Application.prototype.iconForRoute = function(route) {
      if (route >= 500) {
        return 'img/streetcar.png';
      } else if (route >= 300) {
        return 'img/night_bus.png';
      } else {
        return 'img/bus.png';
      }
    };

    Application.prototype.markerMouseOverHandler = function(event) {
      var _this = this;

      clearTimeout(routeViewTimer);
      return routeViewTimer = setTimeout(function() {
        var hoveredMarker, markerToDisable, vehicleID, vehicleIDs, _i, _len;

        hoveredMarker = markerPositions[event.latLng];
        vehicleIDs = Object.keys(markers);
        _this.showStopsForVehicle(hoveredMarker.vehicle);
        for (_i = 0, _len = vehicleIDs.length; _i < _len; _i++) {
          vehicleID = vehicleIDs[_i];
          if (markers.hasOwnProperty(vehicleID)) {
            markerToDisable = markers[vehicleID];
            if (markerToDisable.vehicle.attr('routeTag') !== hoveredMarker.vehicle.attr('routeTag')) {
              markerToDisable.setVisible(false);
            }
          }
        }
        return selectedRoute = hoveredMarker.vehicle.attr('routeTag');
      });
    };

    Application.prototype.markerMouseOutHandler = function() {
      var stopID, vehicleID, _i, _j, _len, _len1, _ref, _ref1;

      selectedRoute = null;
      _ref = Object.keys(markers);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vehicleID = _ref[_i];
        if (markers.hasOwnProperty(vehicleID)) {
          markers[vehicleID].setVisible(true);
        }
      }
      _ref1 = Object.keys(stopMarkers);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        stopID = _ref1[_j];
        if (stopMarkers.hasOwnProperty(stopID)) {
          stopMarkers[stopID].setMap(null);
        }
      }
      return clearTimeout(routeViewTimer);
    };

    Application.prototype.fetchVehicleLocations = function() {
      var _this = this;

      return $.get('http://webservices.nextbus.com/service/publicXMLFeed?command=vehicleLocations&a=ttc&t=' + lastUpdatedTime, function(data) {
        lastUpdatedTime = $(data).find('body lastTime').attr('time');
        return $(data).find('body vehicle').each(function(id, vehicle) {
          var coordinates, marker;

          if (!markers[$(vehicle).attr('id')]) {
            markers[$(vehicle).attr('id')] = new google.maps.Marker({
              map: map,
              title: _this.nameForRoute(vehicle),
              icon: _this.iconForRoute($(vehicle).attr('routeTag')),
              direction: $(vehicle).attr('dirTag'),
              visible: !selectedRoute
            });
          }
          google.maps.event.addListener(markers[$(vehicle).attr('id')], 'mouseover', _this.markerMouseOverHandler.bind(_this));
          google.maps.event.addListener(markers[$(vehicle).attr('id')], 'mouseout', _this.markerMouseOutHandler.bind(_this));
          marker = markers[$(vehicle).attr('id')];
          coordinates = new google.maps.LatLng($(vehicle).attr('lat'), $(vehicle).attr('lon'));
          delete markerPositions[marker.getPosition()];
          markerPositions[coordinates] = marker;
          marker.setPosition(coordinates);
          marker.vehicle = $(vehicle);
          return routes[$(vehicle).attr('routeTag')]['vehicleIDs'].push($(vehicle).attr('id'));
        });
      });
    };

    Application.prototype.fetchRouteList = function(cb) {
      return $.get('http://webservices.nextbus.com/service/publicXMLFeed?command=routeList&a=ttc', function(data) {
        $(data).find('body route').each(function(id, route) {
          return routes[$(route).attr('tag')] = {
            name: $(route).attr('title'),
            vehicleIDs: []
          };
        });
        return cb();
      });
    };

    Application.prototype.simplifyDirection = function(direction) {
      return direction.split('_').slice(0, -1).join('_');
    };

    Application.prototype.fetchRouteConfig = function(route, cb) {
      var _this = this;

      if ((routes[route]['stops'] == null) || (routes[route]['directions'] == null)) {
        return $.get('http://webservices.nextbus.com/service/publicXMLFeed?command=routeConfig&a=ttc&verbose&r=' + route, function(data) {
          var routeTag;

          route = $($(data).find('body route')[0]);
          routeTag = route.attr('tag');
          routes[routeTag]['stops'] = {};
          routes[routeTag]['directions'] = {};
          $(route).find('> stop').each(function(id, stop) {
            stop = $(stop);
            return routes[routeTag]['stops'][stop.attr('tag')] = stop;
          });
          $(route).find('> direction').each(function(id, direction) {
            routes[routeTag]['directions'][$(direction).attr('tag')] = [];
            return $('stop', direction).each(function(id, stop) {
              return routes[routeTag].directions[$(direction).attr('tag')].push($(stop).attr('tag'));
            });
          });
          return cb();
        });
      } else {
        return cb();
      }
    };

    Application.prototype.showStopsForVehicle = function(vehicle) {
      var direction, route,
        _this = this;

      route = vehicle.attr('routeTag');
      direction = vehicle.attr('dirTag');
      return this.fetchRouteConfig(route, function() {
        var marker, _i, _len, _ref;

        _ref = Object.keys(stopMarkers);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          marker = _ref[_i];
          if (stopMarkers.hasOwnProperty(marker)) {
            stopMarkers[marker].setMap(null);
            delete stopMarkers[marker];
          }
        }
        return $(routes[route]['directions'][direction]).each(function(id, stopTag) {
          var stop;

          stop = $(routes[route]['stops'][stopTag]);
          return stopMarkers[stop.attr('tag')] = new google.maps.Marker({
            map: map,
            title: stop.attr('title'),
            stop: stop,
            position: new google.maps.LatLng(stop.attr('lat'), stop.attr('lon')),
            icon: 'img/stop.png'
          });
        });
      });
    };

    function Application() {
      this.showStopsForVehicle = __bind(this.showStopsForVehicle, this);
      this.fetchRouteConfig = __bind(this.fetchRouteConfig, this);
      this.simplifyDirection = __bind(this.simplifyDirection, this);
      this.fetchRouteList = __bind(this.fetchRouteList, this);
      this.fetchVehicleLocations = __bind(this.fetchVehicleLocations, this);
      this.markerMouseOutHandler = __bind(this.markerMouseOutHandler, this);
      this.markerMouseOverHandler = __bind(this.markerMouseOverHandler, this);
      this.iconForRoute = __bind(this.iconForRoute, this);
      this.nameForRoute = __bind(this.nameForRoute, this);
      this.abbrForVehicle = __bind(this.abbrForVehicle, this);
      var mapOptions, updateInterval,
        _this = this;

      mapOptions = {
        zoom: 12,
        center: new google.maps.LatLng(43.7172467450872, -79.37742082519532),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
      updateInterval = 1500;
      if (document.location.search.indexOf("update=") !== -1) {
        updateInterval = document.location.search.substr(document.location.search.indexOf("update") + 7);
      }
      this.fetchRouteList(function() {
        _this.fetchVehicleLocations();
        return setInterval(_this.fetchVehicleLocations, updateInterval);
      });
    }

    return Application;

  })();

  google.maps.event.addDomListener(window, 'load', function() {
    return new Application();
  });

}).call(this);
